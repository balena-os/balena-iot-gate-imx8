#!/bin/sh

# shellcheck disable=SC1091
. /usr/libexec/os-helpers-logging
. /usr/sbin/balena-config-defaults

BOOT_MOUNT="/bootfs"
BOOTENV_FILENAME="bootenv"

find_boot_partition() {
    BOOT_LABEL_CANDIDATES="${BALENA_BOOT_LABEL} resin-boot"
    if [ "${BALENA_NONENC_BOOT_LABEL}" != "${BALENA_BOOT_LABEL}" ]; then
        BOOT_LABEL_CANDIDATES="${BALENA_NONENC_BOOT_LABEL} ${BOOT_LABEL_CANDIDATES}"
    fi
    for LABEL in ${BOOT_LABEL_CANDIDATES}; do
        BY_LABEL_PATH="/dev/disk/by-label/${LABEL}"
        if [ -L "${BY_LABEL_PATH}" ]; then
            echo "${BY_LABEL_PATH}"
            break
        fi
    done
}

get_bootenv() {
    BOOTENV_FILE="$1"
    KEY="$2"

    grub-editenv "${BOOTENV_FILE}" list | grep "^${KEY}=" | sed -e "s,^${KEY}=\(.*\)$,\1,"
}

abroot_enabled() {
    if [ "$bootparam_balena_stage2" != "true" ]
    then
        return 1
    fi

    if [ "$bootparam_flasher" = "true" ]
    then
        return 1
    fi

    return 0
}

rollback_fixup() {
    OLDROOT_MOUNT=/oldrootfs
    BOOTDEV=mmcblk2boot0

    UBOOT_FILE=imx-boot-iot-gate-imx8-sd.bin-flash_evk

    # Check whether the old system does not use balena bootloader
    mkdir -p "${OLDROOT_MOUNT}"
    alt_root_part='B'
    if [ "${ROOT_PART}" = "${alt_root_part}" ]; then
        alt_root_part='A'
    fi
    mount "/dev/disk/by-label/resin-root${alt_root_part}" "${OLDROOT_MOUNT}"
    if ! find "${OLDROOT_MOUNT}" -type f -name "$(basename ${BOOTENV_FILE})" | grep -q .; then
        # Re-program the old U-boot to bypass balena bootloader as the old kernel
        # might not be able to kexec without patches.
        warn "Rolling back U-boot"
        echo 0 > /sys/block/${BOOTDEV}/force_ro
        if ! dd if="${OLDROOT_MOUNT}/boot/${UBOOT_FILE}" of=/dev/${BOOTDEV} conv=fsync seek=33 bs=1024; then
            error "Failed to roll back U-boot - system probably won't boot"
        fi
        echo 1 > /sys/block/${BOOTDEV}/force_ro
        # Configure the old u-boot to perform altboot to restore boot partition contents
        # Set `resin_root_part` to the partition that failed to boot
        blockdev=$(lsblk -nlo name "/dev/disk/by-label/resin-root${ROOT_PART}")
        new_part_idx=$(cat "/sys/class/block/$blockdev/partition")
        new_part_idx=$(printf "%x" $new_part_idx)
        info "Setting uboot root partition index to $new_part_idx..."
        tmpfile="$(mktemp)"
        echo "resin_root_part=$new_part_idx" > ${tmpfile}
        echo "upgrade_available=${UPGRADE_AVAILABLE}" >> ${tmpfile}
        mv "${tmpfile}" "${BOOT_MOUNT}/resinOS_uEnv.txt"
        # And set maximum boot count reached OS_BOOTCOUNT_LIMIT so U-boot will altboot
        echo "bootcount=3" > ${tmpfile}
        rm -f "${BOOT_MOUNT}"/*bootcount.env* || true
        mv "${tmpfile}" "${BOOT_MOUNT}/bootcount.env"
        rm -f "${BOOT_MOUNT}/bootenv"
        # Reboot into the old u-boot
        info "Rebooting into rolled back U-boot"
        umount "${OLDROOT_MOUNT}"
        umount "${BOOT_MOUNT}"
        reboot -f
    fi
    umount "${OLDROOT_MOUNT}"
    umount "${BOOT_MOUNT}"
}

abroot_run() {
    BOOT_PART=$(find_boot_partition)

    if [ "x${BOOT_PART}" = "x" ]; then
        fail "Failed to identify boot partition"
    fi

    BOOT_DEV="/dev/$(lsblk -nlo pkname ${BOOT_PART})"

    mkdir -p "${BOOT_MOUNT}"
    mount -t vfat  "${BOOT_PART}" "${BOOT_MOUNT}"
    BOOTENV_FILE=$(find "${BOOT_MOUNT}" -name "${BOOTENV_FILENAME}")

    BOOTENV_COUNT=$(echo "${BOOTENV_FILE}" | wc -w)
    if [ "${BOOTENV_COUNT}" -eq 0 ]; then
        umount "${BOOT_MOUNT}"
        fail "Boot environment file not found"
    fi

    if [ "${BOOTENV_COUNT}" -gt 1 ]; then
        # If multiple bootenv files are found, use the first one
        # This is unexpected and non-deterministic and while normally
        # it would be preferrable to fail at this point, this is early
        # boot stage and in this particular situation we choose to guess
        # as it increases the chance to succeed and not brick the device
        for BOOTENV_ONE_FILE in ${BOOTENV_FILE}; do
            BOOTENV_FILE="${BOOTENV_ONE_FILE}"
            warn "Multiple boot environment files found"
            warn "Will use '${BOOTENV_FILE}' and hope for the best"
            break
        done
    fi

    ROOT_PART=$(get_bootenv "${BOOTENV_FILE}" "resin_root_part")
    BOOT_COUNT=$(get_bootenv "${BOOTENV_FILE}" "bootcount")
    UPGRADE_AVAILABLE=$(get_bootenv "${BOOTENV_FILE}" "upgrade_available")

    if [ "${UPGRADE_AVAILABLE}" -eq 1 ]; then
        BOOT_COUNT=$["${BOOT_COUNT}" + 1]
        grub-editenv "${BOOTENV_FILE}" set "bootcount=${BOOT_COUNT}"
    fi

    # Rollback if this is the 3rd boot attempt
    if [ "${BOOT_COUNT}" -ge 3 ]; then
        rollback_fixup
        if [ "${ROOT_PART}" = "A" ]; then
            ROOT_PART="B"
        else
            ROOT_PART="A"
        fi
    fi

    ROOT_UUID=$(lsblk -nlo uuid,label "${BOOT_DEV}" | grep "\(balena\|resin\)-root${ROOT_PART}" | cut -f1 -d " ")

    # Switch between rootA and rootB
    export bootparam_root=UUID=${ROOT_UUID}

    umount "${BOOT_MOUNT}"
}
